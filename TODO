# Super important
1. Avoid creating multiple socket-ssh connections upon tab switch.
2. Test if it even works or not with Kubernetes.

# Important
1. Add error modal to display error.
2. Change the response of StartContainer to include container name as well. Add setContainerIps and unsetContainerIps. - (Done. DONE)
3. Add spinner
4. Load configs conditionally. - (Done for development. DONE)
5. Premium users should not delete the containers upon unloading or atleast something similar.
6. Test for multiple containers. - (Done. DONE)
7. For kubernetes stop is not an option, so give an illusion that k8s has stopped the pod. - (Done. DONE)
8. beforeunload, not stopping container, stop the container. - (Done, added beacon endpoint. DONE)
9. Add an SSHSocket container in the same network for a user, if it does not exist.
10. Enforce password constraints.


TO Fix:
1. Scale the websockets.
2. Get the stream to work properly. - Migrated Code to node.
3. Clean code.

Immediate:
-----------
1. Bind a setTimeout handler that gets triggered every now and then. This will complete the login flow.
2. Implement gRPC on REST-Containers. Rename it to ContainerMaker and use gRPC.
3. Move the setup to kubernetes completely.
4. The response of REST-container has response, whereas dataApi does not have it. So, we will have to cater that soon. Before that, we will do the gRPC changes with security and everything.


TODO login flow:
----------------
1. Implement background task that calls usl for all routes. - Web workers - Make sure config works.
2. Implement context API.
    - isLoggedIn should only check context API.
    - The Redirect Handler should call /@me and populate the contextAPI.
   Update:
    - This wont work.
    - First off contextApi is useless once the browser closes.
    - If we replace contextApi with localStorage, and check to see if userData exists in localStorage, then it will always be there unless removed.
    - The only way you are logged out is if your session expires on the server.
    - If you are active on the browser, you send a session usl update every 29 minutes.
    - So even if a user comes back after closing the browser, user doesnt have to login.
    - This means you will never be logged out when youre active meaning you can never delete the localStorage when youre active.
    - The localStorage can only be deleted 30 minutes after you close the browser, which is again not possible.
    - So we are going to have to stick to the current approach. 
    - Instead we are going to implement a loading screen.
3. Implement Logout.
4. Fix credentials in fetch api.
5. All fetch requests in the code need to set credentials to true.
